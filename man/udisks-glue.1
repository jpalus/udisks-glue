.TH UDISKS\-GLUE 1
.SH NAME
udisks\-glue \- A tool to associate udisks events to user\-defined actions
.SH SYNOPSIS
.B udisks\-glue
[\fB\-c \fIconfig\-file\fR]
[\fB\-f\fR]
[\fB\-p \fIpidfile\fR]
[\fB\-s\fR]

.B udisks\-glue
[\fB\-h\fR]
.SH DESCRIPTION
udisks\-glue listens for UDisks DBus events and reacts to them according to the configuration.
.TP 26
.B \-c\fR/\fB\-\-config \fIconfig\-file
Use \fIconfig\-file\fR as the configuration file
.TP
.B \-f\fR/\fB\-\-foreground
Remain in foreground (don't daemonize)
.TP
.B \-h\fR/\fB\-\-help
Display usage information and exit
.TP
.B \-p\fR/\fB\-\-pidfile \fIpidfile
Use \fIpidfile\fR file as the pidfile
.TP
.B \-s\fR/\fB\-\-session
Enable ConsoleKit session support
.SH CONFIGURATION FILE
If no configuration file is specified by command line arguments, udisks\-glue looks for the following configuration files (in this order):
.TP 3
.B 1.
.I $HOME\fB/.udisks\-glue.conf
.TP
.B 2.
.I $XDG_CONFIG_HOME\fB/udisks\-glue/config
.TP
.B 3.
.B /etc/udisks\-glue.conf
.TP
.B 4.
.I $DIR\fB/udisks\-glue/config\fR for each dir in \fI$XDG_CONFIG_DIR
.PP
A configuration file must exist or otherwise udisks\-glue will fail to start up.
.SH CONFIGURATION SYNTAX
udisks\-glue is configured by a series of match directives referencing filter directives. Filter directives define parameters that filter the UDisks events. Match directives specify actions to be taken by udisks\-glue in case the corresponded filter matches.

Filter and match directives can be specified in any order. You should use unique names for filter directives. The rules are evaluated in the order the match directives are specified. A default directive is a special directive used as a fallback in case no other directives match. It does not reference a filter directive. You may choose not to specify a default directive.

Due to the way the rules are evaluated, it's recommended that more specific match directives are defined before less specific ones. If a match directive does not specify one of the available actions, another directive may be chosen. The currently available match directives are:
.TP 25
.B automount
If set, try to automatically mount the device (unset by default)
.TP
.B automount_filesystem
Filesystem type to use when automounting the device
.TP
.B automount_options
List of options to use when automounting the device
.TP
.B post_insertion_command
Command to run after a device is inserted or after its media has been made available
.TP
.B post_mount_command
Command to run after a device has been mounted
.TP
.B post_unmount_command
Command to run after a device has been unmounted
.TP
.B post_removal_command
Command to run after a device or its media has been removed
.PP
udisks\-glue will substitute some tokens with information about the device in each of the commands listed above:
.TP 15
.B %device_file
Path to the device file
.TP
.B %mount_point
Last known mount point for the device (only replaced in \fBpost_mount_command\fR and \fBpost_unmount_command\fR)
.PP
The currently supported filter parameters are:
.TP 31
.B label (string)
User\-visible label of the detected file system
.TP
.B optical (boolean)
Set if the device uses optical disc as its media
.TP
.B optical_disc_closed (boolean)
Set if the optical disc is closed
.TP
.B partition (boolean)
Set if the device is a partition of another device
.TP
.B partition_table (boolean)
Set if the device has a partition table
.TP
.B readonly (boolean)
Set if the device is a ready\-only device
.TP
.B removable (boolean)
Set if the device is a removable device
.TP
.B type (string)
Extended information about the device, generally set to the name of the detected file system if the \fBusage\fR property is set to \fIfilesystem
.TP
.B usage (string)
The result of probing for signatures on the block device, generally set to \fIfilesystem\fR if a mountable file system was detected
.TP
.B uuid (string)
UUID of the detected file system
.PP
Note that the rules are evaluated only at the time the device or its media is inserted. Internal drives are always ignored.
.SH EXAMPLES
The following configuration example shows how you can automount USB pendrives and similar devices. Notifications are provided by a custom script that could display on\-screen information or provide notifications in some other way:

.nf
filter disks {
    optical = false
    partition_table = false
    usage = filesystem
}

match disks {
    automount = true
    automount_options = sync
    post_mount_command = "mount\-notify mounted %device_file %mount_point"
    post_unmount_command = "mount\-notify unmounted %device_file %mount_point"
}
.fi

A more complex example shows how the filters can be used to mount optical and non\-optical media (USB pendrives and the like) using different mount options and how a specific program can be launched on non\-closed optical discs.

.nf
#
# Filters
#

filter disks {
    optical = false
    partition_table = false
    usage = filesystem
}

filter burnable {
    optical = true
    optical_disc_closed = false
}

filter optical {
    optical = true
}

#
# The default entry (only used if no filters match)
#

default {
    post_insertion_command = "insertion\-notify %device_file"
}

#
# Additional entries
#

match disks {
    automount = true
    automount_options = { sync, noatime }
    post_mount_command = "mount\-notify mounted %device_file %mount_point"
    post_unmount_command = "mount\-notify unmounted %device_file %mount_point"
}

match burnable {
    automount = true
    automount_options = ro
    post_insertion_command = "k3b %device_file"
    post_mount_command = "mount\-notify mounted %device_file %mount_point"
}

match optical {
    automount = true
    automount_options = ro
    post_mount_command = "mount\-notify mounted %device_file %mount_point"
}
.fi

.SH SEE ALSO
.B udisks\fR(1),
.B udisks\fR(7),
.B udisks\-daemon\fR(8)
